

# This file was *autogenerated* from the file tc.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_251 = Integer(251); _sage_const_128 = Integer(128); _sage_const_73 = Integer(73); _sage_const_71 = Integer(71); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
from sage.all import *
import auxmath
import pickle


class Member:
	shares = []
	def __init__(self, f,g,F,G):
		self.f = f
		self.g = g
		self.F = F
		self.G = G
	
	def calculate_params(self, N, q, T = 'transpose'):
		if T == 'standard':
			self.fs = self.F
		elif T == 'transpose':
			self.fs = self.g
		self.h = auxmath.h_from_fg(self.f,self.g,N,q)
		
	def eval_k(self):
		# save unsigned values, remember it
		f_bin  = ''.join([bin(abs(x))[_sage_const_2 :] for x in  self.f.list()])
		fs_bin = ''.join([bin(abs(x))[_sage_const_2 :] for x in self.fs.list()])
		h_bin = ''.join([bin(abs(x))[_sage_const_2 :] for x in self.h.list()])
		print (len(f_bin), len(fs_bin), len(h_bin))
		self.k = int(f_bin + fs_bin + h_bin, _sage_const_2 )
		
	def update_ms(self, m, s):
		self.m = m
		self.s = s


class DC():
	NN = _sage_const_251 
	q = _sage_const_128 
	df = _sage_const_73 
	dg = _sage_const_71 
	t = _sage_const_3 
	n = _sage_const_5 
	T = 'transpose'

	members = []
	users_count = _sage_const_0 

	def __init__(self):
		for i in range(self.n + _sage_const_1 ):
			print (i)
			self.add_member() 

	def add_member(self):
		f,g,F,G = auxmath.gen_NTRU_fgFG(self.NN, self.q)
		m = Member(f,g,F,G)
		m.calculate_params(self.NN, self.q, self.T)
		m.eval_k()
		self.members.append(m)

	def get_new_member_params():
		self.users_count += _sage_const_1 
		return pickle.dumps(self.members[self.users_count])


#def connect_handler(data):


